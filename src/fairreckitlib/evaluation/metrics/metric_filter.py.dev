"""
This program has been developed by students from the bachelor Computer Science at
Utrecht University within the Software Project course.
Â© Copyright Utrecht University (Department of Information and Computing Sciences)
"""

import enum


class Filter(enum.Enum):
    """
    Data filter/selection
    """
    EQUALS = 'equals' # Select equal rows (e.g. selecting a category lke males)
    CLAMP = 'clamp' # Select rows with values between a min and max


def filter_pass(set_paths, profile, filter_passes):
    """Make temporary filtered data

    Args:
        set_paths: paths to the train and test set and model result
        profile: additional dataset information for filtering
        filter_passes: list of filter passes to perform

    Returns:
        the paths of the filtered data.
    """
    filtered_paths = []
    for path in set_paths:
        raw_df = pd.read_csv(
            path,
            header=None,
            sep='\t',
            names=['user', 'item', 'rating']
        )
        merged = raw_df.merge(raw_df, profile, on=['user'])
        print(merged.head())
        filtered_df = filter_data(merged, filter_passes)['user', 'item', 'rating']
        print(filtered_df.head())
        filtered_path = path + FILTER_SUFFIX
        filtered_paths.append(filtered_path)
        pd.write_csv(filtered_df, filtered_path, header=None, sep='\t')

    return filtered_paths


def filter_data(dataframe, filters):
    """
    Filter a dataset using the specified list of filter passes

    :param dataframe: The dataset (Pandas dataframe) to be filtered
    :param filters: The filters used
    :return: The filtered dataframe
    """
    for filter_pass in filters:
        name = filter_pass['name']
        value = filter_pass['value']
        #print(filter_pass)
        #print(filter_pass['type'])
        if filter_pass['type'] == Filter.EQUALS.value:
            # Rows that are equal to the
            condition = dataframe[name] == value
        elif filter_pass['type'] == Filter.CLAMP.value:
            # Exclusive max
            condition = value['min'] <= dataframe[name] < value['max']
        else:
            raise Exception # Type of filter_pass not found

        dataframe = dataframe[condition]
    return dataframe
